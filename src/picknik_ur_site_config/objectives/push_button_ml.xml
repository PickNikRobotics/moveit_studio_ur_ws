<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4" main_tree_to_execute="Push Button ML">
  <BehaviorTree ID="Push Button ML" _description="Move to a waypoint, and then push a button detected by a image segmentation network with the end effector" _favorite="false">
    <Control ID="Sequence">
      <SubTree ID="Re-Zero Force-Torque Sensors" _collapsed="true"/>
      <SubTree ID="Move to Waypoint" waypoint_name="Hinge View" joint_group_name="manipulator" controller_names="/joint_trajectory_controller /robotiq_gripper_controller" use_all_planners="false"/>
      <SubTree ID="Clear Snapshot" _collapsed="true"/>
      <SubTree ID="Reset Planning Scene" _collapsed="true"/>
      <Action ID="GetCameraInfo" topic_name="/wrist_mounted_camera/color/camera_info" message_out="{camera_info}"/>
      <Action ID="GetImage" topic_name="/wrist_mounted_camera/color/image_raw" message_out="{image}"/>
      <Action ID="GetPointCloud" topic_name="/wrist_mounted_camera/depth/color/points" message_out="{point_cloud}"/>
      <Action ID="UpdatePlanningSceneService" point_cloud="{point_cloud}" point_cloud_service="/point_cloud_service"/>
      <Action ID="GetMasks2DAction" image="{image}" action_name="get_masks_2d_maskrcnn" valid_classes="button" min_confidence="0.8" max_nms_iou="0.8" min_relative_area="0" max_relative_area="0.7" timeout_sec="5" masks2d="{masks2d}"/>
      <Action ID="GetMasks3DFromMasks2D" point_cloud="{point_cloud}" masks2d="{masks2d}" camera_info="{camera_info}" masks3d="{masks3d}"/>
      <Decorator ID="ForEachMask3D" vector_in="{masks3d}" out="{mask3d}">
        <Control ID="Sequence">
          <Action ID="GetPointCloudFromMask3D" point_cloud="{point_cloud}" mask3d="{mask3d}" point_cloud_fragment="{point_cloud_fragment}"/>
          <Action ID="SendPointCloudToUI" point_cloud="{point_cloud_fragment}" sensor_name="scene_scan_camera" point_cloud_uuid="" pcd_topic="/pcd_pointcloud_captures"/>
        </Control>
      </Decorator>
      <Action ID="GetGraspableObjectsFromMasks3D" point_cloud="{point_cloud}" masks3d="{masks3d}" base_frame="world" plane_inlier_threshold="0.02" minimum_face_area="0.000625" face_separation_threshold="0.03" graspable_objects="{graspable_objects}"/>
      <Decorator ID="ForceSuccess">
        <Decorator ID="ForEachGraspableObject" vector_in="{graspable_objects}" out="{button}">
          <Action ID="AlwaysFailure"/>
        </Decorator>
      </Decorator>
      <Action ID="ExtractGraspableObjectPose" graspable_object="{button}" pose="{button_pose}"/>
      <SubTree ID="CloseGripper" _collapsed="true"/>
      <Action ID="SaveCurrentState" saved_robot_state="{initial_robot_state}"/>
      <Control ID="Sequence">
        <Action ID="InitializeMTCTask" task_id="push_button_ml" controller_names="/joint_trajectory_controller" task="{push_along_axis_task}"/>
        <Action ID="SetupMTCCurrentState" task="{push_along_axis_task}"/>
        <Action ID="SetupMTCMoveToPose" ik_frame="grasp_link" planning_group_name="manipulator" target_pose="{button_pose}" task="{push_along_axis_task}" use_all_planners="false"/>
        <Action ID="SetupMTCUpdateGroupCollisionRule" name="AllowGripperCollisionWithOctomap" group_name="gripper" object_name="<octomap>" allow_collision="true" task="{push_along_axis_task}"/>
        <Action ID="SetupMTCMoveAlongFrameAxis" task="{push_along_axis_task}" hand_frame="grasp_link" axis_frame="grasp_link" axis_x="0.0" axis_y="0.0" axis_z="1.0" max_distance="0.2" min_distance="0.05" planning_group_name="manipulator" velocity_scale="0.05" acceleration_scale="0.05"/>
        <Action ID="SetupMTCUpdateGroupCollisionRule" name="ForbidGripperCollisionWithOctomap" group_name="gripper" object_name="<octomap>" allow_collision="false" task="{push_along_axis_task}"/>
        <Action ID="PlanMTCTask" solution="{full_push_along_axis_solution}" task="{push_along_axis_task}"/>
        <Action ID="SplitMTCSolution" solution_in="{full_push_along_axis_solution}" index="3" solution_out_1="{move_to_approach_solution}" solution_out_2="{push_solution}"/>
        <Action ID="WaitForUserTrajectoryApproval" solution="{full_push_along_axis_solution}"/>
        <Action ID="ExecuteMTCTask" solution="{move_to_approach_solution}"/>
        <Action ID="SaveCurrentState" saved_robot_state="{pre_approach_robot_state}"/>
        <Control ID="Parallel" success_count="1" failure_count="1">
          <SubTree ID="Force Exceeds Threshold"/>
          <Action ID="ExecuteMTCTask" solution="{push_solution}"/>
        </Control>
      </Control>
      <SubTree ID="RetreatToInitialPose" pre_approach_robot_state="{pre_approach_robot_state}" initial_robot_state="{initial_robot_state}" _collapsed="true"/>
    </Control>
  </BehaviorTree>
  <BehaviorTree ID="CloseGripper">
    <Control ID="Sequence" name="close_gripper_main">
      <Action ID="MoveGripperAction" gripper_command_action_name="/robotiq_gripper_controller/gripper_cmd" position="0.7929"/>
    </Control>
  </BehaviorTree>
  <BehaviorTree ID="RetreatToInitialPose">
    <Control ID="Sequence">
      <Action ID="InitializeMTCTask" task_id="push_button_ml_retreat" controller_names="/joint_trajectory_controller" task="{retreat_task}"/>
      <Action ID="SetupMTCCurrentState" task="{retreat_task}"/>
      <Action ID="SetupMTCUpdateGroupCollisionRule" name="AllowGripperCollisionWithOctomap" group_name="gripper" object_name="<octomap>" allow_collision="true" task="{retreat_task}"/>
      <Action ID="SetupMTCCartesianMoveToJointState" joint_state="{pre_approach_robot_state}" planning_group_name="manipulator" task="{retreat_task}"/>
      <Action ID="SetupMTCUpdateGroupCollisionRule" name="ForbidGripperCollisionWithOctomap" group_name="gripper" object_name="<octomap>" allow_collision="false" task="{retreat_task}"/>
      <Action ID="SetupMTCMoveToJointState" joint_state="{initial_robot_state}" planning_group_name="manipulator" task="{retreat_task}" use_all_planners="false" />
      <Action ID="PlanMTCTask" solution="{return_to_initial_waypoint_solution}" task="{retreat_task}"/>
      <Action ID="ExecuteMTCTask" solution="{return_to_initial_waypoint_solution}"/>
    </Control>
  </BehaviorTree>
</root>

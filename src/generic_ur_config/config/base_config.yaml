###############################################################
#
#  This configures the robot to work with moveit studio
#
###############################################################
#
#  This contains information for a unique instance of a robot.
#


hardware:
  # Used by the ur_description package to set kinematics and geometry for a specific robot type.
  type: "ur10"
  simulated: True

  # The robot's IP address
  ip: 0.0.0.0

  robot_driver_persist_launch_file:
    package: "generic_ur_config"
    path: "launch/robot_drivers_to_persist.launch.py"
  robot_driver_restart_launch_file:
    package: "generic_ur_config"
    path: "launch/robot_drivers_to_restart.launch.py"
  hardware_launch_file:
    package: "generic_ur_config"
    path: "launch/hardware.launch.py"

  simulated_robot_driver_persist_launch_file:
    package: "generic_ur_config"
    path: "launch/sim/robot_drivers_to_persist_sim.launch.py"
  simulated_robot_driver_restart_launch_file:
    package: "generic_ur_config"
    path: "launch/sim/robot_drivers_to_restart_sim.launch.py"
  simulated_hardware_launch_file:
    package: "generic_ur_config"
    path: "launch/sim/hardware_sim.launch.py"

  camera_config_file:
    package: "generic_ur_config"
    path: "config/cameras.yaml"

  # Parameters used to configure the robot description through XACRO
  robot_description:
    urdf:
      package: "generic_ur_config"
      path: "description/picknik_ur.xacro"
    srdf:
      package: "generic_ur_config"
      path: "config/moveit/picknik_ur_base.srdf"
    urdf_params:
      - name: "%>> hardware.type"
      - prefix: ""
      - use_sim: "%>> hardware.simulated"
      - use_fake_hardware: "%>> hardware.simulated"
      - fake_sensor_commands: "false"
      - headless_mode: "true"
      - robot_ip: "%>> hardware.ip"
      - has_tool_changer: "false"
      - external_camera: "%>> hardware.simulated"  # set to match sim status to support prior sim behavior
      - joint_limits_parameters_file:
          package: "generic_ur_config"
          path: "config/moveit/joint_limits.yaml"
      - kinematics_parameters_file:
          package: "ur_description"
          path: "config"
      - physical_parameters_file:
          package: "ur_description"
          path: "config"
      - visual_parameters_file:
          package: "ur_description"
          path: "config"

ros_global_params:
  use_sim_time: "%>> hardware.simulated"

optional_feature_params:
  gazebo_gui: False
  gazebo_verbose: False
  use_joystick: False
  use_external_webcam: False
  use_formant_bridge: False

# This Configures moveit params that are in moveit_config.py
moveit_params:
  joint_group_name: "manipulator"

  ompl_planning:
    package: "generic_ur_config"
    path: "config/moveit/ompl_planning.yaml"
  kinematics:
    package: "generic_ur_config"
    path: "config/moveit/pick_ik_kinematics.yaml"
  servo:
    package: "generic_ur_config"
    path: "config/moveit/ur_servo.yaml"
  sensors_3d:
    package: "generic_ur_config"
    path: "config/moveit/sensors_3d.yaml"
  servo_kinematics:
    package: "generic_ur_config"
    path: "config/moveit/pick_ik_kinematics_servo.yaml"
  joint_limits:
    package: "generic_ur_config"
    path: "config/moveit/joint_limits.yaml"
  pilz_cartesian_limits:
    package: "generic_ur_config"
    path: "config/moveit/pilz_cartesian_limits.yaml"

  publish:
    planning_scene: True
    geometry_updates: True
    state_updates: True
    transforms_updates: True

  trajectory_execution:
    manage_controllers: True
    allowed_execution_duration_scaling: 2.0
    allowed_goal_duration_margin: 5.0
    allowed_start_tolerance: 0.01

ui_params:
  servo_endpoint_frame_id: "manual_grasp_link"

# This configures what controllers gets run at startup
ros2_control:
  config:
    package: "generic_ur_config"
    path: "config/control/picknik_ur.ros2_control.yaml"
  # Load and start these controllers so they can be used immediately.
  controllers_active_at_startup:
    - "force_torque_sensor_broadcaster"
    - "robotiq_gripper_controller"
    - "joint_state_broadcaster"
    - "streaming_controller"
    - "io_and_status_controller"
    - "robotiq_activation_controller"
  # Load but do not start these controllers so they can be activated later if needed.
  controllers_inactive_at_startup:
    - "joint_trajectory_controller"
    - "admittance_controller_open_door"
    - "joint_trajectory_controller_chained_open_door"
  # Configure remapping rules to let multiple controllers receive commands on the same topic.
  controller_shared_topics:
    "/robot_controllers/commands":
      - "/streaming_controller/commands"
    "/robot_controllers/joint_trajectory":
      - "/joint_trajectory_controller/joint_trajectory"
      - "/joint_trajectory_controller_chained_open_door/joint_trajectory"

# Octomap manager configuration parameters
octomap_manager:
  # Input point cloud topic name. The *output* point cloud topic published by
  # the Octomap manager node is defined in sensors_3d.yaml.
  input_point_cloud_topic: "/wrist_mounted_camera/depth/color/points"

objectives:
  behavior_loader_plugins:
    core:
      - "moveit_studio::behaviors::CoreBehaviorsLoader"
    visual_servo_behaviors:
      - "moveit_visual_servo::behaviors::VisualServoBehaviorLoader"
  objective_library_paths:
    core:
      package_name: "generic_ur_config"
      relative_path: "objectives"
  waypoints_file:
    package_name: "generic_ur_config"
    relative_path: "waypoints/waypoints.yaml"


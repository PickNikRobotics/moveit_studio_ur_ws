<root>
     <!-- Action nodes -->
    <TreeNodesModel>
        <Action ID="GetApriltagPose">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Provides functions for realtime tracking of AprilTag in published image topics.
                </p>
                <p>
                    Parameters for tag detector are ingested parsed YAML configuration. Raw images are processed from the specified camera stream topic,
                    and detections are published as a vector of TransformStamped to the specified output topic.
                </p>
                <p>
                    NOTE: This behavior will never terminate on its own. You must wrap it in a sequence that will handle halting the node.
                </p>
            </description>
            <input_port name="parameters" default="{parameters}">Parameters for the apriltag bt node</input_port>
            <input_port name="camera_stream_topic" default="/wrist_mounted_camera/color/image_raw">Target camera stream topic.</input_port>
            <input_port name="detection_transform_stamped_topic" default="/apriltag_detections">Output transform stamped topic.</input_port>
        </Action>
        <Action ID="ActivateControllers">
            <description>
                <p>
                    Activates a controller whose name is given by the "controller_name" input port.
                </p>
            </description>
            <input_port name="controller_names" default="">The controller to activate.</input_port>
        </Action>
        <Action ID="BreakpointSubscriber">
            <description>
                <p>
                    Subscribes to a topic that can be used for pausing an objective during execution to allow introspection. This behavior will listen on the configured topic for a True/False message which will cause it to continue or abort from a breakpoint that is included in an objective.
                </p>
            </description>
            <input_port name="breakpoint_topic" default="/studio_breakpoint">Topic the breakpoint listens to. Can be used to continue executing or halting the program to the breakpoint.</input_port>
        </Action>
        <Action ID="CheckCuboidSimilarity">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Check if an input object is similar to another object. Succeeds if the objects are similar within the provided criteria and fails if they are not similar.
                </p>
            </description>
            <input_port name="input_cuboid" default="{object}">Cuboid object to evaluate.</input_port>
            <input_port name="reference_cuboid" default="{object}">Cuboid object to use as a reference for comparison.</input_port>
            <input_port name="base_frame" default="world">Fixed frame to use when comparing object poses.</input_port>
            <input_port name="distance_threshold" default="0.02">Threshold for magnitude difference in centroid position.</input_port>
            <input_port name="orientation_threshold" default="3.14">Threshold for magnitude of difference in centroid orientation.</input_port>
        </Action>
        <Action ID="ClearSnapshot">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Clears the existing Octomap and Pointcloud snapshots.
                </p>
            </description>
        </Action>
        <Action ID="EditWaypoint">
            <metadata subcategory="User Input"/>
            <description>
                <p>
                    Uses the "/edit_waypoints service" to save the robot's current state as a new named waypoint or erase an existing waypoint. The name of the waypoint to save or delete is set through the "waypoint_name" behavior parameter. The operation to perform on the waypoint is set through the "waypoint_operation" behavior parameter, which must be set to either "save" or "erase".
                </p>
            </description>
            <input_port name="waypoint_name" default="{waypoint_name}">Name of the waypoint to edit.</input_port>
            <input_port name="waypoint_operation" default="{waypoint_operation}">Waypoint operation type.</input_port>
        </Action>
        <Action ID="ExecuteMTCTask">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                Takes a shared pointer to an MTC Solution object via an input data port, and executes the lowest-cost trajectory in that Solution using the MTC ExecuteTaskSolution MoveGroup capability's "/execute_task_solution" action server.
                </p>
            </description>
            <input_port name="solution" default="{mtc_solution}">MoveIt Task Constructor plan solution.</input_port>
        </Action>
        <Action ID="GetClosestObjectToPose">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Given a collection of CollisionObjects, find the one closest to the provided pose.
                </p>
            </description>
            <input_port name="objects" default="{objects}">Vector of moveit_msgs/CollisionObjects.</input_port>
            <input_port name="pose" default="{pose}">The geometry_msgs/PoseStamped used as the point of reference.</input_port>
            <input_port name="distance_threshold" default="0.1">Search for objects within this distance in meters relative to the pose.</input_port>
            <output_port name="closest_object" default="{object}">The object that is closest to the pose.</output_port>
        </Action>
        <Action ID="FindSingularCuboids">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Analyze a point cloud to find well-singulated cuboids which supported by a surface.
                </p>
            </description>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <input_port name="point_cloud" default="{point_cloud}">Point cloud used as input for finding cuboids.</input_port>
            <output_port name="detected_shapes" default="{detected_shapes}">Vector of detected cuboids, represented as moveit_msgs/CollisionObject messages.</output_port>
        </Action>
        <Action ID="GetDoorHandle">
            <metadata advanced="true" subcategory="Perception"/>
            <description>
                <p>
                    Calculates the pose, length, and width of a door handle. By convention, the z-axis of "target_handle_pose" is aligned with the handle's axis of rotation, and the x-axis points along the handle toward the door hinge.
                </p>
            </description>
            <input_port name="handle_pivot_pose" default="{get_door_handle_pose.handle_pivot_pose}">Pose of the door handle pivot point.</input_port>
            <input_port name="handle_tip_pose" default="{get_door_handle_pose.handle_tip_pose}">Pose of the tip of the door handle.</input_port>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <input_port name="point_cloud" default="{point_cloud}">Point cloud used as input for finding the door handle.</input_port>
            <output_port name="target_handle_length" default="{handle_length}">Length of the door handle in meters.</output_port>
            <output_port name="target_handle_pose" default="{handle_pose}">Pose of the door handle.</output_port>
            <output_port name="target_handle_z_offset" default="{handle_z_offset}">The door handle height.</output_port>
        </Action>
        <Action ID="GetDrawerAxisFromSelection">
            <metadata advanced="true" subcategory="User Input"/>
            <description>
                <p>
                    Given an input PoseStamped representing a grasp pose selected on a drawer handle, output three PoseStampeds that define a screw motion to open the drawer.
                </p>
                <p>
                    Assumes that the z-axis of the grasp pose matches the normal vector of the front face of the drawer.
                </p>
            </description>
            <input_port name="grasp_rotation_z_radians" default="1.5708">Rotation to apply to the target grasp pose around its z-axis.</input_port>
            <input_port name="target_grasp_pose" default="{process_selection.grasp_pose}">Drawer handle grasp pose.</input_port>
            <output_port name="grasp_pose" default="{grasp_pose}">Drawer handle grasp pose.</output_port>
            <output_port name="screw_axis_pose" default="{screw_axis_pose}">Pose of the axis of the screw motion to open the drawer.</output_port>
            <output_port name="screw_origin_pose" default="{screw_origin_pose}">Pose of the origin of the screw motion to open the drawer.</output_port>
        </Action>
        <Action ID="GetHingeAxisFromSurfaceSelection">
            <metadata advanced="true" subcategory="User Input"/>
            <description>
                <p>
                    Arrange input poses into the order expected by the affordance template behavior.
                </p>
                <p>
                    Given three input poses generated from surface-normal calculation of a point cloud, where the first represents the location of the door handle and the second and third are points on the axis of the hinge, determine which hinge axis pose should be the origin of the hinge vector so that a positive rotation about the hinge axis opens the door towards the user's viewpoint.
                </p>
                <p>
                    Assumes that the z-axis of the two poses on the hinge axis are oriented facing into the surface of the door.
                </p>
                <p>
                    The direction of the door relative to the surface normal is determined by calculating the vector cross product of the vector from the hinge origin pose to the grasp pose and the vector from the hinge origin pose to the hinge axis pose, and then calculating the dot product of the resulting vector and the z-axis of the hinge origin pose. If the dot product is positive, the hinge origin and hinge axis poses are correctly ordered. If the dot product is negative, the hinge origin and hinge axis poses need to be reversed for positive door rotation to open the door towards the viewpoint.
                </p>
            </description>
            <input_port name="target_grasp_pose" default="{target_grasp_pose}">Pose representing the grasp point.</input_port>
            <input_port name="hinge_axis_pose_start" default="{hinge_axis_pose_start}">Pose marking the start of the hinge axis.</input_port>
            <input_port name="hinge_axis_pose_end" default="{hinge_axis_pose_end}">Pose marking the end of the hinge axis.</input_port>
            <output_port name="grasp_pose" default="{grasp_pose}">Pose representing the grasp point.</output_port>
            <output_port name="screw_axis_pose" default="{screw_axis_pose}">Pose of the axis of the screw motion to open a door.</output_port>
            <output_port name="screw_origin_pose" default="{screw_origin_pose}">Pose of the origin of the screw motion to open a door.</output_port>
        </Action>
        <Action ID="GetLatestTransform">
            <metadata subcategory="Motion Planning"/>
            <description>
                <p>
                    Gets the latest transform from the robot model root to a frame specified as an input parameter to this behavior.
                </p>
            </description>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <output_port name="transform" default="{transform}">Latest transform between the target and source frames.</output_port>
        </Action>
        <Action ID="GetPointCloud">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Captures a point cloud and makes it available on an output port.
                </p>
                <p>
                    Optionally takes a string uuid which can be used to identify the requester, and makes it available on an output port. The parameter is "optional", if it unset then no output will be forwarded. Note: no validation is done on the value of the UUID, so any string is provided (including the empty string) it will be set on the output port.
                </p>
            </description>
            <input_port name="target_point_cloud_topic" default="/wrist_mounted_camera/depth/color/points">Point cloud topic the behavior subscribes to.</input_port>
            <input_port name="uuid" default="">Optional identifier for the incoming request, can be used for mapping responses</input_port>
            <output_port name="point_cloud" default="{point_cloud}">Captured point cloud in sensor_msgs::msg::PointCloud2 format.</output_port>
            <output_port name="point_cloud_uuid" default="{point_cloud_uuid}">Captured point cloud in sensor_msgs::msg::PointCloud2 format.</output_port>
        </Action>
        <Action ID="SaveImageToFile">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Saves a single image to a file as soon as it receives a message on the topic. Filename will follow the syntax of IMAGE_TOPIC_image_raw_YYYYMMDD_HHMMSS.png
                </p>
            </description>
            <input_port name="image_topic" default="/scene_camera/color/image_raw">The topic this behaviour subscribes to.</input_port>
            <input_port name="file_path" default="~/.config/moveit_studio/saved_behavior_data">The full path to save the image in.</input_port>
        </Action>
        <Action ID="SavePointCloudToFile">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Save the contents of a point cloud on the blackboard to a pcd file using the pcl::PointXYZRGB point type. Filename will follow the syntax of pointcloud_YYYYMMDD_HHMMSS.pcd
                </p>
            </description>
            <input_port name="point_cloud" default="{point_cloud}">This port expects a sensor_msgs::PointCloud2</input_port>
            <input_port name="file_path" default="~/.config/moveit_studio/saved_behavior_data">The full path to save the point cloud in.</input_port>
        </Action>
        <Action ID="InitializeMTCTask">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Creates a shared pointer to a new MTC Task object, populates it with global settings (for example, the names of controllers to enable by default when executing trajectories planned by this task), and sets it as an output data port.
                </p>
            </description>
            <input_port name="controller_names" default="/joint_trajectory_controller /robotiq_gripper_controller">List of controller names to use for executing an MTC trajectory.</input_port>
            <output_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</output_port>
        </Action>
        <Action ID="IsConstraintSatisfied">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Check if the robot's current state satisfies a kinematic visibility constraint.
                </p>
            </description>
            <input_port name="object" default="{object}">The constraint is satisfied if the camera has an unobstructed view of this object.</input_port>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
        </Action>
        <Action ID="IsForceWithinThreshold">
            <metadata subcategory="Motion Planning"/>
            <description>
                <p>
                    A condition node that monitors a wrench topic and returns "BT::NodeStatus::FAILURE" when ticked if the magnitude of the force components has exceeded a specified threshold for some number of consecutive observations.
                </p>
            </description>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
        </Action>
        <Action ID="IsUserAvailable">
            <metadata advanced="true" subcategory="User Input"/>
            <description>
                <p>
                    Checks for the presence of a user interface by checking if the "/trajectory_bridge" ROS node exists.
                </p>
            </description>
        </Action>
        <Action ID="LoadObjectiveParameters">
            <description>
                <p>
                    Loads the configuration parameters for a given objective. The configuration file name is given as an input port parameters to this behavior. The parameters are loaded once per objective execution. To reload the parameter from the file, just execute the objective again.
                </p>
            </description>
            <input_port name="config_file_name" default="">Name of the objective configuration file.</input_port>
            <output_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</output_port>
        </Action>
        <Action ID="LoadPointCloudFromFile">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Loads a point cloud from a .PCD file, converts it to a ROS sensor_msgs/PointCloud2 message, and writes it to an output data port.
                </p>
            </description>
            <input_port name="file_path" default="">Path to the .PCD file to load.</input_port>
            <input_port name="frame_id" default="world">Frame ID to set for the loaded point cloud.</input_port>
            <output_port name="point_cloud" default="{point_cloud}">Output point cloud message.</output_port>
        </Action>
        <Action ID="ModifyObjectInPlanningScene">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Add a collision object to the planning scene.
                </p>
            </description>
            <input_port name="object" default="{object}">The object to add to the planning scene, represented as a moveit_msgs/CollisionObject.</input_port>
            <input_port name="apply_planning_scene_service" default="/apply_planning_scene">Name of the service advertised by the MoveIt2 ApplyPlanningScene MoveGroup capability.</input_port>
        </Action>
        <Action ID="MoveGripperAction">
            <metadata subcategory="Grasping"/>
            <description>
                <p>
                    Actuate a gripper through its driver node's GripperCommand action server. Given the name of the action topic and a target gripper position, move the gripper to the specified position.
                </p>
            </description>
            <input_port name="gripper_command_action_name" default="/robotiq_gripper_controller/gripper_cmd">Gripper command action topic name.</input_port>
            <input_port name="position" default="0.7929">Gripper joint target position.</input_port>
        </Action>
        <Action ID="MoveToJointState">
            <metadata subcategory="Motion Planning"/>
            <description>
                <p>
                    Moved to a named Waypoint.
                </p>
            </description>
            <input_port name="waypoint_name" default="Forward Down">Name of the waypoint to move to.</input_port>
            <input_port name="planning_group_name" default="manipulator">Name of the MoveIt planning group.</input_port>
            <input_port name="controller_names" default="/joint_trajectory_controller /robotiq_gripper_controller">List of controllers to use for executing the trajectory.</input_port>
        </Action>
        <Action ID="PlanMTCTask">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Takes a shared pointer to an existing MTC Task object via an input data port, plans the task, and sets the resulting MTC Solution object as an output data port.
                </p>
            </description>
            <input_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</input_port>
            <output_port name="solution" default="{mtc_solution}">MoveIt Task Constructor plan solution.</output_port>
        </Action>
        <Action ID="PublishPointCloud">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Publishes a point cloud on a ROS topic (typically used for debugging purposes).
                </p>
            </description>
            <input_port name="point_cloud" default="{point_cloud}">Point cloud in sensor_msgs::msg::PointCloud2 format.</input_port>
            <input_port name="point_cloud_topic" default="/my_point_cloud">Topic the point cloud is published to.</input_port>
        </Action>
        <Action ID="ResetPlanningSceneObjects">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Removes all objects which were added to the planning scene during runtime.
                </p>
            </description>
            <input_port name="apply_planning_scene_service" default="/apply_planning_scene">Name of the service advertised by the MoveIt2 ApplyPlanningScene MoveGroup capability.</input_port>
        </Action>
        <Action ID="RetrieveWaypoint">
            <metadata subcategory="Motion Planning"/>
            <description>
                <p>
                    Given a named waypoint, sends a service request to the Agent WaypointManager to retrieve the joint state associated with that waypoint.
                </p>
            </description>
            <input_port name="waypoint_name" default="{waypoint_name}"/>
            <output_port name="waypoint_joint_state" default="{target_joint_state}"/>
        </Action>
        <Action ID="SaveCurrentState">
            <metadata subcategory="User Input"/>
            <description>
                <p>
                    Use the "/get_planning_scene" service to save the robot's current state.
                </p>
            </description>
            <output_port name="saved_robot_state" default="{robot_state}">Current robot state.</output_port>
        </Action>
        <Action ID="SendPointCloudToUI">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Given a point cloud, filter it using MoveIt's settings for that sensor, convert it to ASCII PCD format, and publish it on a topic.
                </p>
                <p>
                    The UUID parameter can be used to track the pointcloud request through to other behaviors, if required. It is an optional input port, and if unset then the published message will have an empty string in its UUID field. Note: no validation is done on the value of the UUID, so any string that is provided (including the empty string) will be set on the output port.
                </p>
            </description>
            <input_port name="point_cloud" default="{point_cloud}">Point cloud in sensor_msgs::msg::PointCloud2 format.</input_port>
            <input_port name="sensor_name" default="scene_scan_camera">The name of the sensor the point cloud was generated from</input_port>
            <input_port name="point_cloud_uuid" default="">Optional identifier for the request to be published to the pcd_topic</input_port>
            <input_port name="pcd_topic" default="/pcd_pointcloud_captures">Topic the pcd formatted point cloud is published to.</input_port>
        </Action>
        <Action ID="SetupMTCAffordanceTemplate">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Configures MTC stages to perform a motion that can be parameterized as a screw trajectory. Examples in practice include opening doors and drawers.
                </p>
                <p>
                    The input data ports are generally calculated by separate perception processing Behaviors in a previous step of the Objective.
                </p>
                <p>
                    Given an existing MTC Task object and input parameters that configure a screw motion affordance template, perform the following steps:
                </p>
                <ul>
                    <li>
                        Move to a pre-grasp pose offset from the specified grasp pose.
                    </li>
                    <li>
                        Approach the grasp pose.
                    </li>
                    <li>
                        Close the gripper.
                    </li>
                    <li>
                        Move along a screw-parameterised trajectory.
                    </li>
                    <li>
                        Open the gripper.
                    </li>
                    <li>
                        Retreat from the grasp pose.
                    </li>
                </ul>
            </description>
            <input_port name="grasp_pose" default="{grasp_pose}">End-effector grasping pose.</input_port>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <input_port name="screw_axis_pose" default="{screw_axis_pose}">Pose of the axis of the screw motion.</input_port>
            <input_port name="screw_origin_pose" default="{screw_origin_pose}">Pose of the origin of the screw motion to open the drawer.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCCartesianMoveToJointState">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object and a joint state, appends MTC stages to describe a cartesian motion plan to that joint state.
                </p>
            </description>
            <input_port name="joint_state" default="{joint_state}">Target joint state.</input_port>
            <input_port name="planning_group_name" default="manipulator">Name of the MoveIt planning group.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCCurrentState">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object, appends an MTC CurrentState Stage to the Task.
                </p>
            </description>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCInterpolateToJointState">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object and a joint state, appends MTC stages to describe a joint-interpolated motion plan to that joint state.
                </p>
            </description>
            <input_port name="joint_state" default="{joint_state}">Target joint state.</input_port>
            <input_port name="planning_group_name" default="manipulator">Name of the MoveIt planning group.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCMoveAlongFrameAxis">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object, frame name, axis, and move distance, appends MTC stages to describe a cartesian motion plan in the frame's axis with the specified distance.
                </p>
            </description>
            <input_port name="axis" default="z">Name of the axis to move along. Can be either 'x', 'y' or 'z'.</input_port>
            <input_port name="max_distance" default="0.2">Maximum distance, in meters, to move along the axis.</input_port>
            <input_port name="min_distance" default="0.1">Minimum distance, in meters, to move along the axis.</input_port>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCMoveToJointState">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object and a joint state, appends MTC stages to describe a freespace motion plan to that joint state.
                </p>
            </description>
            <input_port name="planning_group_name" default="manipulator">Name of the MoveIt planning group.</input_port>
            <input_port name="joint_state" default="{joint_state}">Target joint state.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCMoveToNamedState">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object and the name of a known state, appends MTC stages to describe a freespace motion plan to that state.
                </p>
            </description>
            <input_port name="planning_group_name" default="manipulator">Name of the MoveIt planning group.</input_port>
            <input_port name="goal_state_name" default="Forward Down">Named joint state used as a motion planning goal state.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCMoveToPose">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object and a target pose, appends MTC stages to describe a freespace motion plan to that target pose.
                </p>
            </description>
            <input_port name="ik_frame" default="manual_grasp_link">Name of the frame that is moved to align with the goal pose.</input_port>
            <input_port name="planning_group_name" default="manipulator">Name of the MoveIt planning group.</input_port>
            <input_port name="target_pose" default="{target_pose}">Goal pose.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCOpenLeverHandleDoor">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Configures MTC stages to open a lever-handled door by turning the handle and pushing the door away from the robot.
                </p>
                <p>
                    The input data ports are generally calculated by separate perception processing Behaviors in a previous step of the Objective.
                </p>
            </description>
            <input_port name="handle_length" default="{handle_length}">Length of the door handle in meters.</input_port>
            <input_port name="handle_pose" default="{handle_pose}">Pose of the door handle.</input_port>
            <input_port name="handle_z_offset" default="{handle_z_offset}">The door handle height.</input_port>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCPickCuboid">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object and a target object, appends MTC stages to describe a motion plan to approach, grasp and lift the object.
                </p>
            </description>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <input_port name="cuboid_object" default="{object}">Cuboid object to grasp, represented as a moveit_msgs/CollisionObject.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCPickObject">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Given an existing MTC Task object and a target grasp pose, appends MTC stages to describe a motion plan to approach, grasp and lift an object at that pose.
                </p>
            </description>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <input_port name="grasp_pose" default="{grasp_pose}">End-effector grasping pose.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SetupMTCUpdateGroupCollisionRule">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Add an MTC Stage to an MTC Task that modifies the planning scene's Allowed Collision Matrix to permit or forbid collision between a planning scene object and the links of a named robot planning group while planning subsequent Stages.
                </p>
            </description>
            <input_port name="parameters" default="{parameters}">Behavior parameters stored in a common configuration file for the objective.</input_port>
            <inout_port name="task" default="{mtc_task}">MoveIt Task Constructor task.</inout_port>
        </Action>
        <Action ID="SplitMTCSolution">
            <metadata subcategory="MTC"/>
            <description>
                <p>
                    Split an MTC Solution message in two by dividing its vector of subtrajectories at the specified index.
                </p>
            </description>
            <input_port name="solution_in" default="{solution_in}"/>
            <input_port name="index" default="0"/>
            <output_port name="solution_out_1" default="{solution_out_1}"/>
            <output_port name="solution_out_2" default="{solution_out_2}"/>
        </Action>
        <Action ID="Teleoperate">
            <metadata advanced="true" subcategory="User Input"/>
            <description>
                <p>
                    This is a special Behavior to run human-in-the-loop teleoperation using MoveIt Servo through the Objective Server.
                </p>
                <p>
                    When started, this Behavior will run INDEFINITELY until it is halted. This will happen either when the root node of the behavior tree is halted as the Objective is canceled, or when this Behavior's parent control node halts it. When this Behavior first transitions from IDLE to RUNNING, it starts and unpauses Servo control using the services advertised by the Servo server node. While this Behavior is RUNNING, it subscribes to JointJog and TwistStamped command messages that originate in the user interface, and republishes these messages to the command topics advertised by the Servo server node. When this Behavior is halted, it pauses Servo control using the server's services.
                </p>
            </description>
            <input_port name="controller_name" default="streaming_controller">Name of the controller to use for servoing.</input_port>
        </Action>
        <Action ID="UpdateAdmittanceController">
            <metadata subcategory="Motion Planning"/>
            <description>
                <p>
                    Updates parameters for an existing admittance controller.
                </p>
            </description>
            <input_port name="config_file_name" default="">Configuration file name.</input_port>
        </Action>
        <Action ID="UpdatePlanningScene">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    DEPRECATED: Use UpdatePlanningSceneService and SendPointCloudToUI instead.
                </p>
                <p>
                    Given a point cloud from the specified sensor, will sanitize the point cloud according to that sensor's params and publish the result to the relevant topic to update the occupancy map. It will also convert the resulting pointcloud to ASCII PCD format and publish it to the specified pcd_topic.
                </p>
                <p>
                    The UUID parameter can be used to track the pointcloud request through to other behaviors, if required. It is an optional input port, and if it unset then the published message will have an empty string in its UUID field. Note: no validation is done on the value of the UUID, so any string is provided (including the empty string) it will be set on the output port.
                </p>
            </description>
            <input_port name="point_cloud" default="{point_cloud}">Point cloud in sensor_msgs::msg::PointCloud2 format.</input_port>
            <input_port name="sensor_name" default="scene_scan_camera">The name of the sensor the point cloud was generated from</input_port>
            <input_port name="point_cloud_uuid" default="">Optional identifier for the request to be published to the pcd_topic</input_port>
            <input_port name="pcd_topic" default="/pcd_pointcloud_captures">Topic the pcd formatted point cloud is published to.</input_port>
        </Action>
        <Action ID="UpdatePlanningSceneService">
            <metadata subcategory="Perception"/>
            <description>
                <p>
                    Updates the planning scene's collision octree using the provided point cloud, and waits until the octree has finished updating.
                </p>
            </description>
            <input_port name="point_cloud" default="{point_cloud}">Point cloud in sensor_msgs::msg::PointCloud2 format.</input_port>
            <input_port name="point_cloud_service" default="/point_cloud_service">Name of the service advertised by the PointCloudServiceOctomapUpdater MoveIt plugin.</input_port>
        </Action>
        <Action ID="WaitForDuration">
            <description>
                <p>
                    Wait for a specified duration before succeeding.
                </p>
            </description>
            <input_port name="delay_duration" default="5">Sleep duration in seconds.</input_port>
        </Action>
        <Action ID="WaitForUserTrajectoryApproval">
            <metadata advanced="true" subcategory="User Input"/>
            <description>
                <p>
                    Takes a shared pointer to an MTC Solution object via an input data port, and publishes the lowest-cost trajectory in that Solution on the "/preview_solution" topic. Creates a SetBool service server on the "/execute_behavior_solution" topic and waits to receive a request containing data: true before succeeding.
                </p>
            </description>
            <input_port name="solution" default="{mtc_solution}">MoveIt Task Constructor plan solution.</input_port>
        </Action>
        <SubTree ID="MoveToWaypoint">
            <description/>
            <input_port name="waypoint_name" default="Forward Down">Name of the waypoint to move to.</input_port>
        </SubTree>
    </TreeNodesModel>
</root>
